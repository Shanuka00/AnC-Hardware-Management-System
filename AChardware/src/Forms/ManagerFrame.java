/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import AChardware.DBConn;
import Forms.ChooseUser;
import Forms.CustomerFrame;
import Forms.Report;
import com.mysql.jdbc.PreparedStatement;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class ManagerFrame extends javax.swing.JFrame {

    /**
     * Creates new form ManagerFrame
     */
    public ManagerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItm = new javax.swing.JTable();
        pnlAddStock = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtCatID = new javax.swing.JTextField();
        txtCatName = new javax.swing.JTextField();
        btnCatSave = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbStkIID = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        txtNewStk = new javax.swing.JTextField();
        btnStkSave = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        cmbSupID = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        txtPurPrc = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cmbCatAddDrop = new javax.swing.JComboBox<>();
        btnCatDelete = new javax.swing.JButton();
        btnChk = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbCat = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        lblItmID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtiname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtidesc = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtisellp = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtidisc = new javax.swing.JTextField();
        btnSetID = new javax.swing.JButton();
        btnIdelete = new javax.swing.JButton();
        btnIsave = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnItmStock = new javax.swing.JButton();
        btnEmployee = new javax.swing.JButton();
        btnSuppliers = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblItm.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblItm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Description", "Selling Price", "Discount", "Category"
            }
        ));
        tblItm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItmMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItm);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 470, 820, 240));

        pnlAddStock.setBackground(new java.awt.Color(102, 102, 255));
        pnlAddStock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pnlAddStockFocusGained(evt);
            }
        });
        pnlAddStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlAddStockMouseClicked(evt);
            }
        });
        pnlAddStock.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setText("New Stock Arrivals");
        pnlAddStock.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 171, 30));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel11.setText("Add / Drop Categories");
        pnlAddStock.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 20, 200, 30));

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("New Category  ID :");
        pnlAddStock.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 40));

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Category Name :");
        pnlAddStock.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 96, 40));

        txtCatID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAddStock.add(txtCatID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 100, 25));

        txtCatName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAddStock.add(txtCatName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 100, 25));

        btnCatSave.setBackground(new java.awt.Color(0, 204, 0));
        btnCatSave.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnCatSave.setText("Save");
        btnCatSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatSaveActionPerformed(evt);
            }
        });
        pnlAddStock.add(btnCatSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 75, 25));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Item ID :");
        pnlAddStock.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, 58, 30));

        cmbStkIID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbStkIID.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbStkIIDPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbStkIID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStkIIDActionPerformed(evt);
            }
        });
        pnlAddStock.add(cmbStkIID, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 120, 25));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("New stock :");
        pnlAddStock.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 69, 30));

        txtNewStk.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAddStock.add(txtNewStk, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 140, 120, 25));

        btnStkSave.setBackground(new java.awt.Color(0, 204, 0));
        btnStkSave.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnStkSave.setText("Save");
        btnStkSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStkSaveActionPerformed(evt);
            }
        });
        pnlAddStock.add(btnStkSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, 75, 25));

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Supplier ID :");
        pnlAddStock.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 70, 30));

        cmbSupID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbSupID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupIDActionPerformed(evt);
            }
        });
        pnlAddStock.add(cmbSupID, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, 120, 25));

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Purchase Price :");
        pnlAddStock.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 90, 40));

        txtPurPrc.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAddStock.add(txtPurPrc, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 120, 25));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlAddStock.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 15, -1, -1));

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Category  :");
        pnlAddStock.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 90, 40));

        cmbCatAddDrop.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbCatAddDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cmbCatAddDrop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbCatAddDropMouseClicked(evt);
            }
        });
        cmbCatAddDrop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCatAddDropKeyPressed(evt);
            }
        });
        pnlAddStock.add(cmbCatAddDrop, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 100, 25));

        btnCatDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnCatDelete.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnCatDelete.setText("Delete");
        btnCatDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatDeleteActionPerformed(evt);
            }
        });
        pnlAddStock.add(btnCatDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 75, 25));

        btnChk.setBackground(new java.awt.Color(153, 153, 0));
        btnChk.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnChk.setText("Check");
        btnChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChkActionPerformed(evt);
            }
        });
        pnlAddStock.add(btnChk, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, 75, 25));

        jPanel1.add(pnlAddStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 150, 490, 270));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setText("Add / Update Items");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 190, 40));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Category :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, 90, 40));

        cmbCat.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(cmbCat, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, 160, 30));

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setText("Item ID :");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, 90, 20));

        lblItmID.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblItmID.setText("no data");
        jPanel1.add(lblItmID, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 225, 160, 30));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Item Name :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, 90, 30));

        txtiname.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(txtiname, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, 160, 30));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Description :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 300, 90, 30));

        txtidesc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(txtidesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, 160, 30));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Selling Price :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 340, 90, 30));

        txtisellp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(txtisellp, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 340, 160, 30));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Discount :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 380, 90, 30));

        txtidisc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(txtidisc, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 380, 160, 30));

        btnSetID.setBackground(new java.awt.Color(153, 153, 0));
        btnSetID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSetID.setText("Set ID");
        btnSetID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetIDActionPerformed(evt);
            }
        });
        jPanel1.add(btnSetID, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 420, 80, 25));

        btnIdelete.setBackground(new java.awt.Color(255, 0, 0));
        btnIdelete.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnIdelete.setText("Delete");
        btnIdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnIdelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, 80, 25));

        btnIsave.setBackground(new java.awt.Color(0, 204, 0));
        btnIsave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnIsave.setText("Save");
        btnIsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIsaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnIsave, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, 80, 25));

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Gold Luxury Initial Circle Logo(3).jpg"))); // NOI18N
        lblLogo.setPreferredSize(new java.awt.Dimension(174, 0));
        lblLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoMouseClicked(evt);
            }
        });
        jPanel1.add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 180));

        jPanel3.setBackground(new java.awt.Color(241, 225, 77));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel7.setText("A&C Hardware");
        jLabel7.setToolTipText("");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 276, 50));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel18.setText("Date :");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 70, 50, 30));

        lblDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate.setText("yyyy-mm-dd");
        jPanel3.add(lblDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 70, 100, 30));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 100));

        jLabel21.setBackground(new java.awt.Color(0, 0, 0));
        jLabel21.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("                                                                                                                   Copyright 2023 All Rights Reserved A & C Hardware");
        jLabel21.setOpaque(true);
        jLabel21.setPreferredSize(new java.awt.Dimension(1024, 50));
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 720, 1030, 50));

        jPanel4.setBackground(new java.awt.Color(241, 225, 77));
        jPanel4.setMinimumSize(new java.awt.Dimension(174, 618));
        jPanel4.setPreferredSize(new java.awt.Dimension(170, 618));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnItmStock.setBackground(new java.awt.Color(241, 225, 77));
        btnItmStock.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnItmStock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/list(1).png"))); // NOI18N
        btnItmStock.setText("   Items");
        btnItmStock.setHideActionText(true);
        btnItmStock.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel4.add(btnItmStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 174, 86));

        btnEmployee.setBackground(new java.awt.Color(241, 225, 77));
        btnEmployee.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnEmployee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/human-capital(1).png"))); // NOI18N
        btnEmployee.setText(" Employee");
        btnEmployee.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeActionPerformed(evt);
            }
        });
        jPanel4.add(btnEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 174, 86));

        btnSuppliers.setBackground(new java.awt.Color(241, 225, 77));
        btnSuppliers.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnSuppliers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/agreement(1).png"))); // NOI18N
        btnSuppliers.setText(" Suppliers");
        btnSuppliers.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSuppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuppliersActionPerformed(evt);
            }
        });
        jPanel4.add(btnSuppliers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 174, 86));

        btnReport.setBackground(new java.awt.Color(241, 225, 77));
        btnReport.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/file(1).png"))); // NOI18N
        btnReport.setText("  Report");
        btnReport.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });
        jPanel4.add(btnReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 174, 86));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 174, 620));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 768));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateItmTbl(){
        
        try {
            
            //get date
            Date d = new Date();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            String dd = sdf.format(d);
            lblDate.setText(dd);
            
            //clean the table and set combo box
            
            try{
                int j = tblItm.getRowCount();
                DefaultTableModel dtm = (DefaultTableModel) tblItm.getModel();

                for (int k=0; k<j; k++){
                    dtm.removeRow(0);
                }
            }
            catch(ArrayIndexOutOfBoundsException e){
                System.out.println(e.getMessage()); 
            }
            
            //category combo box
            cmbCat.removeAllItems();
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            Statement stm1 = (Statement) conn.createStatement();
            
            String sql = "select * from category;";
            ResultSet rs = stm1.executeQuery(sql);
                
            while (rs.next()){
                cmbCat.addItem(rs.getString("CAT_NAME"));
            }
            
            
            //stock combo boxes
            DBConn dbConn2 = new DBConn();
            Connection conn2 = dbConn2.conn();
            
            cmbStkIID.removeAllItems();
            cmbSupID.removeAllItems();
            
            Statement stm2 = (Statement) conn2.createStatement();
            
            String sql2 = "SELECT ITEM_ID FROM ITEM_;";
            ResultSet rs2 = stm2.executeQuery(sql2);
                
            while (rs2.next()){
                cmbStkIID.addItem(rs2.getString("ITEM_ID"));
            }
            
            Statement stm3 = (Statement) conn.createStatement();
            
            String sql3 = "SELECT S_ID FROM SUPPLIER;";
            ResultSet rs3 = stm3.executeQuery(sql3);
                
            while (rs3.next()){
                cmbSupID.addItem(rs3.getString("S_ID"));
            }
            
            //lock supplier
            lockSupplier();
        }
        catch (SQLException ex) {
                Logger.getLogger(CustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //category in panal
        cmbCatAddDrop.removeAllItems();
        try {
            
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            Statement stm1 = (Statement) conn.createStatement();
            
            String sql = "select * from category;";
            ResultSet rs = stm1.executeQuery(sql);
            
            while (rs.next()){
                cmbCatAddDrop.addItem(rs.getString("CAT_NAME"));
            }
            
        }
        catch (SQLException ex) {
                Logger.getLogger(CustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        // add items to table
        try {
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            Statement stm2 = (Statement) conn.createStatement();
            
            String sql = "SELECT i.ITEM_ID, i.ITEM_NAME, i.DESCRIPTION, i.SELLING_PRICE, i.DISCOUNT, c.CAT_NAME\n "
                            + " FROM ITEM_ i\n "
                            + " LEFT JOIN CATEGORY c ON i.CAT_ID = c.CAT_ID;";
            
            ResultSet rs = stm2.executeQuery(sql);
                
            while (rs.next()){
                String itmID = String.valueOf(rs.getString("ITEM_ID"));
                String itmName = String.valueOf(rs.getString("ITEM_NAME"));
                String desc = String.valueOf(rs.getString("DESCRIPTION"));
                String sellPr = String.valueOf(rs.getString("SELLING_PRICE"));
                String discount = String.valueOf(rs.getString("DISCOUNT"));
                
                if ("null".equals(discount) || discount.equals("")){
                    discount = "no discount";
                }
                
                String catName = String.valueOf(rs.getString("CAT_NAME"));
                
                //string array for store data into table
                String tbData[] = {itmID,itmName,desc,sellPr,discount,catName};
                DefaultTableModel tblModel = (DefaultTableModel) tblItm.getModel();
                
                //add string array data into tblStock
                tblModel.addRow(tbData);
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(CustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateExistItm(){
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            String iID = lblItmID.getText();

            if (iID.equals("no data")) {
                JOptionPane.showMessageDialog(this, "Select an item row"); 
            }
            else {
                
                Statement stm = (Statement) conn.createStatement();
            
                String selectedvalue2 = cmbCat.getSelectedItem().toString();

                String sql = "SELECT CAT_ID FROM CATEGORY\n "
                                + " WHERE CAT_NAME = '"+selectedvalue2+"';";

                ResultSet rs = stm.executeQuery(sql);

                while (rs.next()){            
                        String icat = rs.getString("CAT_ID");
                        
                        //send values
                        String iname = txtiname.getText();
                        String idesc = txtidesc.getText();
                        String isellp = txtisellp.getText();
                        String idisc = txtidisc.getText();
                        
                        if (idisc.equals("no discount")){
                            idisc = null;
                        }

                        String query = "UPDATE ITEM_\n" +
                                "SET ITEM_NAME = ?, DESCRIPTION = ?, SELLING_PRICE = ?, DISCOUNT = ?\n" +
                                "WHERE ITEM_ID = ?;";

                        PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                        prepstmt.setString(1,iname);
                        prepstmt.setString(2,idesc);
                        prepstmt.setString(3,isellp);
                        prepstmt.setString(4,idisc);
                        prepstmt.setString(5,iID);

                        prepstmt.execute();

                        JOptionPane.showMessageDialog(this, "Item "+iname+" was\n" +
                                                            "updated successfully!");
                }   
            }
            
            //set to default
            lblItmID.setText("no data");
            txtiname.setText("");
            txtidesc.setText("");
            txtisellp.setText("");
            txtidisc.setText("");
            updateItmTbl();
        }
        catch(HeadlessException e){
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            lblItmID.setText("no data");
            txtiname.setText("");
            txtidesc.setText("");
            txtisellp.setText("");
            txtidisc.setText("");
            updateItmTbl();
        }
    }
    
    private void saveNewItem(){
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            String iID = lblItmID.getText();

            if (iID.equals("no data")) {
                JOptionPane.showMessageDialog(this, "Select an item row\n" +
                                                    "Or set a new ID!"); 
            }
            else {
                
                Statement stm = (Statement) conn.createStatement();
            
                String selectedvalue2 = cmbCat.getSelectedItem().toString();

                String sql = "SELECT CAT_ID FROM CATEGORY\n "
                                + " WHERE CAT_NAME = '"+selectedvalue2+"';";

                ResultSet rs = stm.executeQuery(sql);

                while (rs.next()){            
                        String icat = rs.getString("CAT_ID");
                        
                        //send values
                        String iname = txtiname.getText();
                        String idesc = txtidesc.getText();
                        String isellp = txtisellp.getText();
                        String idisc = txtidisc.getText();
                        
                        if (idisc.equals("")){
                            idisc = null;
                        }

                        String query = "insert into item_(ITEM_ID,ITEM_NAME,DESCRIPTION,SELLING_PRICE,CAT_ID,DISCOUNT) values (?,?,?,?,?,?)";

                        PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                        prepstmt.setString(1,iID);
                        prepstmt.setString(2,iname);
                        prepstmt.setString(3,idesc);
                        prepstmt.setString(4,isellp);
                        prepstmt.setString(5,icat);
                        prepstmt.setString(6,idisc);

                        prepstmt.execute();

                        JOptionPane.showMessageDialog(this, "New item "+iname+"\n" +
                                                            "added succesfully!");
                }   
            }
            
            //set to default
            lblItmID.setText("no data");
            txtiname.setText("");
            txtidesc.setText("");
            txtisellp.setText("");
            txtidisc.setText("");
            updateItmTbl();
        }
        catch(HeadlessException e){
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            lblItmID.setText("no data");
            txtiname.setText("");
            txtidesc.setText("");
            txtisellp.setText("");
            txtidisc.setText("");
            updateItmTbl();
        }
    }
    
    private void btnCatSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatSaveActionPerformed
        // TODO add your handling code here:
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String catID = txtCatID.getText();
            String catDesc = txtCatName.getText();

            // validate input
            if (catID.length() < 2 || catID.length() > 5) {
                JOptionPane.showMessageDialog(this, "Category ID must be between 2 and 5 characters.");
            } else if (catDesc.length() < 3 || catDesc.length() > 15) {
                JOptionPane.showMessageDialog(this, "Category name must be between 3 and 15 characters.");
            } else {
                String query = "insert into category(CAT_ID,CAT_NAME) values (?,?)";

                PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                prepstmt.setString(1,catID);
                prepstmt.setString(2,catDesc);

                prepstmt.execute();

                txtCatID.setText("");
                txtCatName.setText("");
                JOptionPane.showMessageDialog(this, "New category "+catDesc+" added successfully!");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Something went wrong. Please try again!");
        }
        /*
        //insert data into category
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String catID = txtCatID.getText();
            String catDesc = txtCatName.getText();
            
            String query = "insert into category(CAT_ID,CAT_NAME) values (?,?)";
            
            PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

            prepstmt.setString(1,catID);
            prepstmt.setString(2,catDesc);

            prepstmt.execute();
            
            txtCatID.setText("");
            txtCatName.setText("");
            JOptionPane.showMessageDialog(this, "new category "+catDesc+" is added\n succesfully!");
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "3 something is wrong\n try again!");
        }
        */
    }//GEN-LAST:event_btnCatSaveActionPerformed

    private void addStocks(){
        // Add new stocks
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String selectedIID = cmbStkIID.getSelectedItem().toString();
            String selectedSID = cmbSupID.getSelectedItem().toString();
            String newStk = txtNewStk.getText();
            String purPrc = txtPurPrc.getText();
            String date = lblDate.getText();
            
            String query = "INSERT INTO SUPPLY(ITEM_ID,S_ID,AVAILABLE_QTY,PUR_UNIT_PRICE,DATE)\n" +
                            "VALUES (?,?,?,?,?);";
            
            PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

            prepstmt.setString(1,selectedIID);
            prepstmt.setString(2,selectedSID);
            prepstmt.setString(3,newStk);
            prepstmt.setString(4,purPrc);
            prepstmt.setString(5,date);

            prepstmt.execute();
            
            txtNewStk.setText("");
            txtPurPrc.setText("");
            JOptionPane.showMessageDialog(this, "new stock "+selectedIID+" is added\n succesfully!");
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
        }
    }
    
    private void updateStocks(){
        // Add new stocks
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();
        
        try{
            String selectedIID = cmbStkIID.getSelectedItem().toString();
            
            Statement stm = (Statement) conn.createStatement();
            
            String sql = "SELECT AVAILABLE_QTY FROM SUPPLY\n" +
                         "WHERE ITEM_ID = '"+selectedIID+"';";
            
            ResultSet rs = stm.executeQuery(sql);
            
            String purPrc = txtPurPrc.getText();
            String date = lblDate.getText();
            
            while (rs.next()){            
                    String qty = rs.getString("AVAILABLE_QTY");
                    
                    String newStk = txtNewStk.getText();
                    
                    int newqty = Integer.parseInt(qty) + Integer.parseInt(newStk);
                    String new_qty = String.valueOf(newqty);
                    
                    String query = "UPDATE SUPPLY\n" +
                            "SET AVAILABLE_QTY = ?, PUR_UNIT_PRICE = ?, DATE = ?\n" +
                            "WHERE ITEM_ID = ?;";

                    PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                    prepstmt.setString(1,new_qty);
                    prepstmt.setString(2,purPrc);
                    prepstmt.setString(3,date);
                    prepstmt.setString(4,selectedIID);

                    prepstmt.execute();

                    txtNewStk.setText("");
                    txtPurPrc.setText("");
                    JOptionPane.showMessageDialog(this, "new stock "+selectedIID+" - "+newStk+"\nis added succesfully!");

            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            txtNewStk.setText("");
            txtPurPrc.setText("");
        }
    }

    private void lockSupplier(){

        try{
            
            //////////////////////////
            
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            cmbStkIID.removeAllItems();
            cmbSupID.removeAllItems();
            
            Statement stm2 = (Statement) conn.createStatement();
            
            String sql2 = "SELECT ITEM_ID FROM ITEM_;";
            ResultSet rs2 = stm2.executeQuery(sql2);
                
            while (rs2.next()){
                cmbStkIID.addItem(rs2.getString("ITEM_ID"));
            }
            
            Statement stm3 = (Statement) conn.createStatement();
            
            String sql3 = "SELECT S_ID FROM SUPPLIER;";
            ResultSet rs3 = stm3.executeQuery(sql3);
                
            while (rs3.next()){
                cmbSupID.addItem(rs3.getString("S_ID"));
            }
            
            //////////////////////////
            
            
            Statement stm = (Statement) conn.createStatement();
            
            String selectedIID = cmbStkIID.getSelectedItem().toString();
            
            String sql = "SELECT S_ID FROM SUPPLY\n" +
                            "WHERE ITEM_ID = '"+selectedIID+"';";
            
            ResultSet rs = stm.executeQuery(sql);
                
            while (rs.next()){ 
                
                    String supplier = rs.getString("S_ID");
                    
                    if (supplier == null){
                        txtNewStk.setText("");
                        txtPurPrc.setText("");
                    }
                    
                    else{
                        cmbSupID.setSelectedItem(supplier);
                        cmbSupID.setEnabled(false);
                        txtNewStk.setText("");
                        txtPurPrc.setText("");
                    }   
            }
        }
        catch(SQLException e){
        }
    }
    
    private void btnStkSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStkSaveActionPerformed
        // TODO add your handling code here: 
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String selectedIID = cmbStkIID.getSelectedItem().toString();

            boolean itemExists;
            // execute the query and retrieve the boolean value
            try (
                Statement stmt1 = conn.createStatement();
                // execute the query and retrieve the boolean value
                ResultSet rs1 = stmt1.executeQuery("SELECT EXISTS(SELECT 1 FROM supply\n" +
                                                    "WHERE ITEM_ID = '"+selectedIID+"')\n" +
                                                    "AS item_exists;")){
                        rs1.next();
                        itemExists = rs1.getBoolean("item_exists");
                }

            // use the boolean value as needed
            if (itemExists) {
                //update item
                try{
                    float newStk = Float.parseFloat(txtNewStk.getText());
                    float purPrc = Float.parseFloat(txtPurPrc.getText());

                    if (newStk >= 1 && newStk <= 100000 && purPrc >= 1 && purPrc <= 10000000) {
                        updateStocks();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid input values! \nPlease enter valid values for new stocks and price!");
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Invalid input values! \nPlease enter valid values for new stocks and price!");
                }
            }
            else {
                //save new item
                try{
                    float newStk = Float.parseFloat(txtNewStk.getText());
                    float purPrc = Float.parseFloat(txtPurPrc.getText());

                    if (newStk >= 1 && newStk <= 100000 && purPrc >= 1 && purPrc <= 10000000) {
                        addStocks();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid input values! \nPlease enter valid values for new stocks and price!");
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Invalid input values! \nPlease enter valid values for new stocks and price!");
                }
            }   
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Something is wrong,\nTry again!");
            //set to default
            txtNewStk.setText("");
            txtPurPrc.setText("");
        }
    }//GEN-LAST:event_btnStkSaveActionPerformed

    private void lockSupplier2(){

        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            Statement stm = (Statement) conn.createStatement();
            
            String selectedIID = cmbStkIID.getSelectedItem().toString();
            
            String sql = "SELECT S_ID FROM SUPPLY\n" +
                            "WHERE ITEM_ID = '"+selectedIID+"';";
            
            ResultSet rs = stm.executeQuery(sql);
                
            while (rs.next()){ 
                
                    String supplier = rs.getString("S_ID");
                    
                    if (supplier == null){
                        txtNewStk.setText("");
                        txtPurPrc.setText("");
                    }
                    
                    else{
                        cmbSupID.setSelectedItem(supplier);
                        cmbSupID.setEnabled(false);
                        txtNewStk.setText("");
                        txtPurPrc.setText("");
                    }   
            }
        }
        catch(SQLException e){
        }
    }
    
    private void cmbStkIIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStkIIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStkIIDActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        updateItmTbl();
    }//GEN-LAST:event_formWindowActivated

    private void pnlAddStockFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlAddStockFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlAddStockFocusGained

    private void cmbCatAddDropKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCatAddDropKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCatAddDropKeyPressed

    private void pnlAddStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAddStockMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlAddStockMouseClicked

    private void cmbCatAddDropMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCatAddDropMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCatAddDropMouseClicked

    private void btnEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeActionPerformed
        // TODO add your handling code here:
        ManageEmployees empage = new ManageEmployees();
        empage.show();
        dispose();
    }//GEN-LAST:event_btnEmployeeActionPerformed

    private void btnSuppliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuppliersActionPerformed
        // TODO add your handling code here:
        ManageSuppliers supage = new ManageSuppliers();
        supage.show();
        dispose();
    }//GEN-LAST:event_btnSuppliersActionPerformed

    
    private void btnSetIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetIDActionPerformed
        // TODO add your handling code here:
        
        /////////////////
        cmbCat.setEnabled(true);

        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try {
            String selectedValue = cmbCat.getSelectedItem().toString();
            String catId = "";

            // Retrieve the CAT_ID for the selected category
            String catIdQuery = "SELECT CAT_ID FROM CATEGORY WHERE CAT_NAME = ?";
            PreparedStatement catIdStmt = (PreparedStatement) conn.prepareStatement(catIdQuery);
            catIdStmt.setString(1, selectedValue);
            ResultSet catIdResult = catIdStmt.executeQuery();

            if (catIdResult.next()) {
                catId = catIdResult.getString("CAT_ID");

                // Retrieve the maximum ITEM_ID for the given CAT_ID
                String maxItemIdQuery = "SELECT MAX(CAST(SUBSTRING(ITEM_ID, ?) AS UNSIGNED)) AS MAX_ID FROM ITEM_ WHERE CAT_ID LIKE ?";
                PreparedStatement maxItemIdStmt = (PreparedStatement) conn.prepareStatement(maxItemIdQuery);
                maxItemIdStmt.setInt(1, catId.length() + 1);
                maxItemIdStmt.setString(2, catId + "%");
                ResultSet maxItemIdResult = maxItemIdStmt.executeQuery();

                if (maxItemIdResult.next()) {
                    String maxItemId = maxItemIdResult.getString("MAX_ID");
                    int newId = Integer.parseInt(maxItemId) + 1;

                    // Construct the new ITEM_ID by combining the CAT_ID and the new numeric ID
                    String newItemId = catId + newId;

                    // Use the newItemId as needed
                    //System.out.println("New ITEM_ID for " + selectedValue + ": " + newItemId);
                    lblItmID.setText(newItemId);
                    txtiname.setText("");
                    txtidesc.setText("");
                    txtisellp.setText("");
                    txtidisc.setText("");
                } else {
                    // If no ITEM_ID found for the selected category, assume the starting ID as "1"
                    String newItemId = catId + "1";
                    System.out.println("New ITEM_ID for " + selectedValue + ": " + newItemId);
                    lblItmID.setText(newItemId);
                    txtiname.setText("");
                    txtidesc.setText("");
                    txtisellp.setText("");
                    txtidisc.setText("");
                }

                maxItemIdResult.close();
                maxItemIdStmt.close();
            } else {
                System.out.println("Selected category not found.");
            }

            catIdResult.close();
            catIdStmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        /////////////////
        
        /*
        cmbCat.setEnabled(true);
        
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            Statement stm = (Statement) conn.createStatement();
            
            String selectedvalue = cmbCat.getSelectedItem().toString();
            
            String sql = "SELECT CAT_ID FROM CATEGORY\n "
                            + " WHERE CAT_NAME = '"+selectedvalue+"';";
            
            ResultSet rs = stm.executeQuery(sql);
                
            while (rs.next()){            
                    String id = rs.getString("CAT_ID");
                    
                    Statement stm2 = (Statement) conn.createStatement();
                    
                    String sql2 = "SELECT MAX(ITEM_ID) AS MAX_ID FROM ITEM_\n "
                            + " WHERE CAT_ID LIKE '%"+id+"%';";
                    
                    ResultSet rs2 = stm2.executeQuery(sql2);
                    
                    while (rs2.next()){
                        String mID = rs2.getString("MAX_ID");
                        
                        if (mID == null){
                            lblItmID.setText(id+'1');
                            txtiname.setText("");
                            txtidesc.setText("");
                            txtisellp.setText("");
                            txtidisc.setText("");
                        }
                        
                        else{
                            String[] arrID = mID.split(id);
                            int newid=Integer.parseInt(arrID[1]) + 1;
                            String new_id = String.valueOf(newid);

                            lblItmID.setText(id+new_id);
                            
                            txtiname.setText("");
                            txtidesc.setText("");
                            txtisellp.setText("");
                            txtidisc.setText("");
                        }
                    }
                    cmbCat.setEnabled(false);
                }
            }
        catch(SQLException e){
        }
        
        */
    }//GEN-LAST:event_btnSetIDActionPerformed

    private void btnIsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIsaveActionPerformed
        // TODO add your handling code here:
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String itmID = lblItmID.getText();
            String itmName = txtiname.getText();
            String itmDesc = txtidesc.getText();
            String itmSellPrice = txtisellp.getText();
            String itmDiscount = txtidisc.getText();

            // Validate input fields
            if (itmID.isEmpty() || itmID.equals("no data")) {
                JOptionPane.showMessageDialog(this, "Please enter a valid item ID!");
                return;
            }
            if (itmName.isEmpty() || itmName.length() < 3 || itmName.length() > 30) {
                JOptionPane.showMessageDialog(this, "Please enter a valid item name!");
                return;
            }
            if (itmDesc.isEmpty() || itmDesc.length() < 3 || itmDesc.length() > 30) {
                JOptionPane.showMessageDialog(this, "Please enter an item description!");
                return;
            }
            if (itmSellPrice.isEmpty() || !itmSellPrice.matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(this, "Please enter a valid selling price!");
                return;
            }
            if (!itmDiscount.matches("[0-9.]+")) {
                if (itmDiscount.isEmpty() || itmDiscount.equals("no discount")) {
                }
                else{
                    JOptionPane.showMessageDialog(this, "Please enter a valid discount!");
                    return;
                }
            }

            boolean itemExists;
            // execute the query and retrieve the boolean value
            try (
                Statement stmt1 = conn.createStatement();
                // execute the query and retrieve the boolean value

                ResultSet rs1 = stmt1.executeQuery("SELECT EXISTS(SELECT 1 FROM item_ WHERE ITEM_ID = '"+itmID+"') AS item_exists;")){
                        rs1.next();
                        itemExists = rs1.getBoolean("item_exists");
            }

            // use the boolean value as needed
            if (itemExists) {
                //update item
                try{
                    updateExistItm();
                    cmbCat.setEnabled(true);
                    //set to default
                    lblItmID.setText("no data");
                    txtiname.setText("");
                    txtidesc.setText("");
                    txtisellp.setText("");
                    txtidisc.setText("");
                    updateItmTbl();
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Something is wrong,\nTry again!");
                }
            }
            else {
                //save new item
                try{
                    saveNewItem();
                    cmbCat.setEnabled(true);
                    //set to default
                    lblItmID.setText("no data");
                    txtiname.setText("");
                    txtidesc.setText("");
                    txtisellp.setText("");
                    txtidisc.setText("");
                    updateItmTbl();
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Something is wrong,\nTry again!");
                }
            }   
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            //set to default
            lblItmID.setText("no data");
            txtiname.setText("");
            txtidesc.setText("");
            txtisellp.setText("");
            txtidisc.setText("");
            updateItmTbl();
        }
    }//GEN-LAST:event_btnIsaveActionPerformed

    private void tblItmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItmMouseClicked
        // TODO add your handling code here:
        try{
        
            if (tblItm.getSelectedRowCount()==1){
                
                int row = tblItm.getSelectedRow();
                
                String itm_id = tblItm.getValueAt(row,0).toString();
                String itm_name = tblItm.getValueAt(row,1).toString();
                String itm_desc = tblItm.getValueAt(row,2).toString();
                String itm_sellp = tblItm.getValueAt(row,3).toString();
                String itm_disc = tblItm.getValueAt(row,4).toString();
                String itm_cat = tblItm.getValueAt(row,5).toString();
                
                lblItmID.setText(itm_id);
                txtiname.setText(itm_name);
                txtidesc.setText(itm_desc);
                txtisellp.setText(itm_sellp);
                txtidisc.setText(itm_disc);
                //set category
                cmbCat.setSelectedItem(itm_cat);
                // make the combo box non-editable
                cmbCat.setEnabled(false);
                
            }
            else{
                if(tblItm.getRowCount()==0){
                    //if empty selected
                    JOptionPane.showMessageDialog(this,"Table is empty!");
                }
                else{
                    //if selected multiple rows
                    JOptionPane.showMessageDialog(this,"Please select single row for delete!");
                }
            }           
        }
        catch(HeadlessException e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_tblItmMouseClicked

    private void btnCatDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatDeleteActionPerformed
        // TODO add your handling code here:
        
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            Statement stm = (Statement) conn.createStatement();

            String selectedvalue2 = cmbCatAddDrop.getSelectedItem().toString();

            // Show confirmation message box before deleting the category
            int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete category "+selectedvalue2+"?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){

                String sql = "SELECT CAT_ID FROM CATEGORY\n "
                                + " WHERE CAT_NAME = '"+selectedvalue2+"';";

                ResultSet rs = stm.executeQuery(sql);

                while (rs.next()){  

                    String catid = rs.getString("CAT_ID");

                    String query = "DELETE FROM CATEGORY WHERE CAT_ID = ?;";

                    PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                    prepstmt.setString(1,catid);

                    prepstmt.execute();

                    JOptionPane.showMessageDialog(this, "Item "+selectedvalue2+" was successfully\n deleted!");

                    //set to default
                    txtCatID.setText("");
                    txtCatName.setText("");
                    updateItmTbl(); 
                }
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Before deleting the category,\nDelete all the items related to the category!");
            //set to default
            txtCatID.setText("");
            txtCatName.setText("");
            updateItmTbl();
        }
    }//GEN-LAST:event_btnCatDeleteActionPerformed

    private void btnIdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdeleteActionPerformed
        // TODO add your handling code here:
        try {
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String itmID = lblItmID.getText();

            boolean itemExists;
            // execute the query and retrieve the boolean value
            try (
                Statement stmt1 = conn.createStatement();
                // execute the query and retrieve the boolean value
                ResultSet rs1 = stmt1.executeQuery("SELECT EXISTS(SELECT 1 FROM item_ WHERE ITEM_ID = '"+itmID+"') AS item_exists;")){
                    rs1.next();
                    itemExists = rs1.getBoolean("item_exists");
            }

            // use the boolean value as needed
            if (itemExists) {
                String itmName = txtiname.getText();

                int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + itmName + "?");
                if (confirmation == JOptionPane.YES_OPTION) {
                    String query = "DELETE FROM item_ WHERE ITEM_ID = ?;";

                    PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                    prepstmt.setString(1, itmID);

                    prepstmt.execute();

                    JOptionPane.showMessageDialog(this, "Item "+itmName+" was successfully\ndeleted!");

                    //set to default
                    lblItmID.setText("no data");
                    txtiname.setText("");
                    txtidesc.setText("");
                    txtisellp.setText("");
                    txtidisc.setText("");
                    updateItmTbl();
                    cmbCat.setEnabled(true);
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "A valid item ID has not been selected or\n"
                        + " This item has not been inserted yet!");
                lblItmID.setText("no data");
                txtiname.setText("");
                txtidesc.setText("");
                txtisellp.setText("");
                txtidisc.setText("");
                updateItmTbl();
                cmbCat.setEnabled(true);
            }   
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "There is still stock of this item,\nSo it cannot be deleted!");
            //set to default
            lblItmID.setText("no data");
            txtiname.setText("");
            txtidesc.setText("");
            txtisellp.setText("");
            txtidisc.setText("");
            cmbCat.setEnabled(true);
            updateItmTbl();
        }
    }//GEN-LAST:event_btnIdeleteActionPerformed

    private void btnChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChkActionPerformed
        // TODO add your handling code here:
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            String selectedIID2 = cmbStkIID.getSelectedItem().toString();
        
            Statement stm = (Statement) conn.createStatement();

            String sql = "SELECT * FROM SUPPLY\n "
                            + " WHERE ITEM_ID = '"+selectedIID2+"';";

            ResultSet rs = stm.executeQuery(sql);

            if(rs.next()) {
                String iid = rs.getString("ITEM_ID");
                String sid = rs.getString("S_ID");
                String avqty = rs.getString("AVAILABLE_QTY");
                String purprc = rs.getString("PUR_UNIT_PRICE");
                String dte = rs.getString("DATE");

                //display as a message box
                JOptionPane.showMessageDialog(this, "Item ID                         ==>    "+iid+"\n" +
                                    "Supplier ID                   ==>    "+sid+"\n" +
                                    "\n" +
                                    "AVAILABLE QTY         ==>    "+avqty+"\n" +
                                    "\n" +
                                    "PURCHESE PRICE    ==>    "+purprc+"\n" +
                                    "\n" +
                                    "DATE                           ==>    "+dte+"");
                txtNewStk.setText("");
                txtPurPrc.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "There is no stock records!");
                txtNewStk.setText("");
                txtPurPrc.setText("");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            //set to default
            txtNewStk.setText("");
            txtPurPrc.setText("");
        }
    }//GEN-LAST:event_btnChkActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        // TODO add your handling code here:
        Report reprt = new Report();
        reprt.show();
        dispose();
    }//GEN-LAST:event_btnReportActionPerformed

    private void cmbStkIIDPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbStkIIDPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        cmbSupID.setEnabled(true);
        lockSupplier2();
    }//GEN-LAST:event_cmbStkIIDPopupMenuWillBecomeInvisible

    private void lblLogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoMouseClicked
        // TODO add your handling code here:
        ChooseUser ch = new ChooseUser();
        ch.show();
        dispose();
    }//GEN-LAST:event_lblLogoMouseClicked

    private void cmbSupIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSupIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCatDelete;
    private javax.swing.JButton btnCatSave;
    private javax.swing.JButton btnChk;
    private javax.swing.JButton btnEmployee;
    private javax.swing.JButton btnIdelete;
    private javax.swing.JButton btnIsave;
    private javax.swing.JButton btnItmStock;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSetID;
    private javax.swing.JButton btnStkSave;
    private javax.swing.JButton btnSuppliers;
    private javax.swing.JComboBox<String> cmbCat;
    private javax.swing.JComboBox<String> cmbCatAddDrop;
    private javax.swing.JComboBox<String> cmbStkIID;
    private javax.swing.JComboBox<String> cmbSupID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblItmID;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JPanel pnlAddStock;
    private javax.swing.JTable tblItm;
    private javax.swing.JTextField txtCatID;
    private javax.swing.JTextField txtCatName;
    private javax.swing.JTextField txtNewStk;
    private javax.swing.JTextField txtPurPrc;
    private javax.swing.JTextField txtidesc;
    private javax.swing.JTextField txtidisc;
    private javax.swing.JTextField txtiname;
    private javax.swing.JTextField txtisellp;
    // End of variables declaration//GEN-END:variables
}
