/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import AChardware.DBConn;
import Forms.ChooseUser;
import Forms.CustomerFrame;
import Forms.ManagerFrame;
import Forms.Report;
import com.mysql.jdbc.PreparedStatement;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class ManageEmployees extends javax.swing.JFrame {

    /**
     * Creates new form Manager_PriceList
     */
    public ManageEmployees() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLogo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnEmployees = new javax.swing.JButton();
        btnItmStock = new javax.swing.JButton();
        btnSuppliers = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmp = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        btnSetID = new javax.swing.JButton();
        btnEmSave = new javax.swing.JButton();
        btnEmDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEmName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        lblEmID = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUsrName = new javax.swing.JTextField();
        pswPsw = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelNo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtAddr = new javax.swing.JTextField();
        cmbRole = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Gold Luxury Initial Circle Logo(3).jpg"))); // NOI18N
        lblLogo.setPreferredSize(new java.awt.Dimension(174, 0));
        lblLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoMouseClicked(evt);
            }
        });
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 180));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(241, 225, 77));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("A&C Hardware");
        jLabel1.setToolTipText("");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 276, 50));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel18.setText("Date :");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 80, 50, -1));

        lblDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate.setText("yyyy-mm-dd");
        jPanel2.add(lblDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 80, 100, -1));

        jLabel7.setBackground(new java.awt.Color(242, 112, 164));
        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 20)); // NOI18N
        jLabel7.setText("          Add or Update Employee Details");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 48, 510, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 100));

        jPanel3.setBackground(new java.awt.Color(241, 225, 77));
        jPanel3.setMinimumSize(new java.awt.Dimension(174, 618));
        jPanel3.setPreferredSize(new java.awt.Dimension(170, 618));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEmployees.setBackground(new java.awt.Color(241, 225, 77));
        btnEmployees.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnEmployees.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/human-capital(1).png"))); // NOI18N
        btnEmployees.setText(" Employee");
        btnEmployees.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeesActionPerformed(evt);
            }
        });
        jPanel3.add(btnEmployees, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 174, 86));

        btnItmStock.setBackground(new java.awt.Color(241, 225, 77));
        btnItmStock.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnItmStock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/list(1).png"))); // NOI18N
        btnItmStock.setText("   Items");
        btnItmStock.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnItmStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItmStockActionPerformed(evt);
            }
        });
        jPanel3.add(btnItmStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 174, 86));

        btnSuppliers.setBackground(new java.awt.Color(241, 225, 77));
        btnSuppliers.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnSuppliers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/agreement(1).png"))); // NOI18N
        btnSuppliers.setText(" Suppliers");
        btnSuppliers.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSuppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuppliersActionPerformed(evt);
            }
        });
        jPanel3.add(btnSuppliers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 174, 86));

        btnReport.setBackground(new java.awt.Color(241, 225, 77));
        btnReport.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/file(1).png"))); // NOI18N
        btnReport.setText("  Report");
        btnReport.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });
        jPanel3.add(btnReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 174, 86));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 174, 620));

        tblEmp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Employee Name", "User Name", "Telephone No", "Role", "Address"
            }
        ));
        tblEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblEmp);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 410, 820, 300));

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("                                                                                                                   Copyright 2023 All Rights Reserved A & C Hardware");
        jLabel11.setOpaque(true);
        jLabel11.setPreferredSize(new java.awt.Dimension(1024, 50));
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 720, 1030, 50));

        btnSetID.setBackground(new java.awt.Color(153, 153, 0));
        btnSetID.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnSetID.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/settings(1).png"))); // NOI18N
        btnSetID.setText("   Set ID");
        btnSetID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSetID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetIDActionPerformed(evt);
            }
        });
        jPanel1.add(btnSetID, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, 166, 48));

        btnEmSave.setBackground(new java.awt.Color(0, 204, 0));
        btnEmSave.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnEmSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/floppy-disk(2).png"))); // NOI18N
        btnEmSave.setText("    Save");
        btnEmSave.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEmSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnEmSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 330, 166, 49));

        btnEmDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnEmDelete.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnEmDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bin(1).png"))); // NOI18N
        btnEmDelete.setText("   Delete");
        btnEmDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEmDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnEmDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 330, 166, 50));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Role :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, 60, 30));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Employee Name :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 170, 120, 20));

        txtEmName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtEmName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmNameActionPerformed(evt);
            }
        });
        jPanel1.add(txtEmName, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 170, 160, 30));

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setText("Employee ID :");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 90, 30));

        lblEmID.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblEmID.setText("no data");
        jPanel1.add(lblEmID, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 200, 160, 30));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("User Name :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 210, 110, 30));

        txtUsrName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtUsrName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsrNameActionPerformed(evt);
            }
        });
        jPanel1.add(txtUsrName, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 210, 160, 30));

        pswPsw.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        pswPsw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pswPswActionPerformed(evt);
            }
        });
        jPanel1.add(pswPsw, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 250, 160, 30));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Password :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 250, 90, 30));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Tel No :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 90, 30));

        txtTelNo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelNoActionPerformed(evt);
            }
        });
        jPanel1.add(txtTelNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 240, 160, 30));

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("Address :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 67, 24));

        txtAddr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(txtAddr, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 280, 160, 30));

        cmbRole.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(cmbRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 160, 160, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 768));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateEmpTbl(){
        
        try {
            
            //get date
            Date d = new Date();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            String dd = sdf.format(d);
            lblDate.setText(dd);
            
            //clean the table
            
            try{
                int j = tblEmp.getRowCount();
                DefaultTableModel dtm = (DefaultTableModel) tblEmp.getModel();

                for (int k=0; k<j; k++){
                    dtm.removeRow(0);
                }
            }
            catch(ArrayIndexOutOfBoundsException e){
                System.out.println(e.getMessage()); 
            }
            
            cmbRole.removeAllItems();
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            Statement stm1 = (Statement) conn.createStatement();
            
            String sql = "SELECT DISTINCT ROLE FROM employee;";
            ResultSet rs = stm1.executeQuery(sql);
                
            while (rs.next()){
                cmbRole.addItem(rs.getString("ROLE"));
            }  
        }
        catch (SQLException ex) {
                Logger.getLogger(CustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        // add items to table
        try {
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();
            
            Statement stm2 = (Statement) conn.createStatement();
            
            String sql = "SELECT E_ID, E_NAME, USER_NAME, TEL_NO, ROLE, ADD_\n "
                            + " FROM employee;";
            
            ResultSet rs = stm2.executeQuery(sql);
                
            while (rs.next()){
                String eID = String.valueOf(rs.getString("E_ID"));
                String eName = String.valueOf(rs.getString("E_NAME"));
                String userN = String.valueOf(rs.getString("USER_NAME"));
                String telNo = String.valueOf(rs.getString("TEL_NO"));
                String role = String.valueOf(rs.getString("ROLE"));
                String addr = String.valueOf(rs.getString("ADD_"));
                
                //string array for store data into table
                String tbData[] = {eID,eName,userN,telNo,role,addr};
                DefaultTableModel tblModel = (DefaultTableModel) tblEmp.getModel();
                
                //add string array data into tblStock
                tblModel.addRow(tbData);
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(CustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEmployeesActionPerformed

    private void btnItmStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItmStockActionPerformed
        // TODO add your handling code here:
        ManagerFrame mngrpage = new ManagerFrame();
        mngrpage.show();
        dispose();
    }//GEN-LAST:event_btnItmStockActionPerformed

    private void btnSuppliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuppliersActionPerformed
        // TODO add your handling code here:
        ManageSuppliers supage = new ManageSuppliers();
        supage.show();
        dispose();
    }//GEN-LAST:event_btnSuppliersActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        updateEmpTbl();
    }//GEN-LAST:event_formWindowActivated

    private void btnSetIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetIDActionPerformed
        // TODO add your handling code here:
        cmbRole.setEnabled(true);
        
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            Statement stm = (Statement) conn.createStatement();
            
            String selectedvalue = cmbRole.getSelectedItem().toString();
            
            String sql = "SELECT E_ID FROM EMPLOYEE\n "
                            + " WHERE ROLE = '"+selectedvalue+"';";
            
            ResultSet rs = stm.executeQuery(sql);
                
            while (rs.next()){            
                    String id = rs.getString("E_ID");
                    
                    String eid = id.substring(0, 3);
                    
                    Statement stm2 = (Statement) conn.createStatement();
                    
                    String sql2 = "SELECT MAX(E_ID) AS MAX_ID FROM EMPLOYEE\n "
                            + " WHERE E_ID LIKE '%"+eid+"%';";
                    
                    ResultSet rs2 = stm2.executeQuery(sql2);
                    
                    while (rs2.next()){
                        String mID = rs2.getString("MAX_ID");
                        
                        if (mID == null){
                            lblEmID.setText(eid+'1');
                            txtEmName.setText("");
                            txtUsrName.setText("");
                            pswPsw.setText("");
                            txtTelNo.setText("");
                            txtAddr.setText("");
                        }
                        
                        else{
                            String[] arrID = mID.split(eid);
                            int newid=Integer.parseInt(arrID[1]) + 1;
                            String new_id = String.valueOf(newid);

                            lblEmID.setText(eid+new_id);
                            
                            txtEmName.setText("");
                            txtUsrName.setText("");
                            pswPsw.setText("");
                            txtTelNo.setText("");
                            txtAddr.setText("");
                        }
                    }
                    cmbRole.setEnabled(false);
                }
            }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
        }
    }//GEN-LAST:event_btnSetIDActionPerformed

    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseClicked
        // TODO add your handling code here:
        try{
            if (tblEmp.getSelectedRowCount()==1){
                
                int row = tblEmp.getSelectedRow();
                
                String em_id = tblEmp.getValueAt(row,0).toString();
                String em_name = tblEmp.getValueAt(row,1).toString();
                String em_usrname = tblEmp.getValueAt(row,2).toString();
                String em_telno = tblEmp.getValueAt(row,3).toString();
                String em_role = tblEmp.getValueAt(row,4).toString();
                String em_addr = tblEmp.getValueAt(row,5).toString();
                
                DBConn dbConn = new DBConn();
                Connection conn = dbConn.conn();
                
                try{
                    Statement stm = (Statement) conn.createStatement();

                    String sql = "SELECT PASSWORD FROM EMPLOYEE\n "
                                    + " WHERE E_ID = '"+em_id+"';";

                    ResultSet rs = stm.executeQuery(sql);

                    while (rs.next()){            
                            String pass = rs.getString("PASSWORD");
                            
                            lblEmID.setText(em_id);
                            txtEmName.setText(em_name);
                            txtUsrName.setText(em_usrname);
                            
                            pswPsw.setText(pass);
                            
                            txtTelNo.setText(em_telno);
                            txtAddr.setText(em_addr);

                            //set category
                            cmbRole.setSelectedItem(em_role);
                            // make the combo box non-editable
                            cmbRole.setEnabled(false);
                    }
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(this, "Cannot load password\n try again!");
                } 
            }
            else{
                if(tblEmp.getRowCount()==0){
                    //if empty selected
                    JOptionPane.showMessageDialog(this,"Table selection is empty!");
                }
                else{
                    //if selected multiple rows
                    JOptionPane.showMessageDialog(this,"Please select a single row!");
                }
            }           
        }
        catch(HeadlessException e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_tblEmpMouseClicked

    private void saveNewEm(){
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            String eID = lblEmID.getText();

            if (eID.equals("no data")) {
                JOptionPane.showMessageDialog(this, "Select an employee row\n" +
                                                    "Or set a new Employee ID!"); 
            }
            else {
                
                Statement stm = (Statement) conn.createStatement();
            
                String role = cmbRole.getSelectedItem().toString();
                
                //send values
                String ename = txtEmName.getText();
                String usrname = txtUsrName.getText();
                String pass = pswPsw.getText();
                String telno = txtTelNo.getText();
                String addr = txtAddr.getText();
                        
                if (addr == null){
                    addr = null;
                }
                
                if (telno == null){
                    telno = null;
                }

                String query = "insert into employee(E_ID,E_NAME,USER_NAME,PASSWORD,TEL_NO,ROLE,ADD_) values (?,?,?,?,?,?,?)";

                PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                prepstmt.setString(1,eID);
                prepstmt.setString(2,ename);
                prepstmt.setString(3,usrname);
                prepstmt.setString(4,pass);
                prepstmt.setString(5,telno);
                prepstmt.setString(6,role);
                prepstmt.setString(7,addr);

                prepstmt.execute();

                JOptionPane.showMessageDialog(this, "New employee "+usrname+"\n" +
                            "added succesfully!");
                }   
            
                //set to default
                lblEmID.setText("no data");
                txtEmName.setText("");
                txtUsrName.setText("");
                pswPsw.setText("");
                txtTelNo.setText("");
                txtAddr.setText("");
                updateEmpTbl();
        }
        catch(HeadlessException e){
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            lblEmID.setText("no data");
            txtEmName.setText("");
            txtUsrName.setText("");
            pswPsw.setText("");
            txtTelNo.setText("");
            txtAddr.setText("");
            updateEmpTbl();
        }
    }

    private void updateExistEm(){
    
        DBConn dbConn = new DBConn();
        Connection conn = dbConn.conn();

        try{
            String iID = lblEmID.getText();

            if (iID.equals("no data")) {
                JOptionPane.showMessageDialog(this, "Select an employee row or add new employee!"); 
            }
            else {
                
                String eid = lblEmID.getText();
                String ename = txtEmName.getText();
                String usrname = txtUsrName.getText();
                String pass = pswPsw.getText();
                String telno = txtTelNo.getText();
                String addr = txtAddr.getText();

                if (addr == null){
                    addr = null;
                }
                
                if (telno == null){
                    telno = null;
                }

                String query = "UPDATE EMPLOYEE\n" +
                        "SET E_NAME = ?, USER_NAME = ?, PASSWORD = ?, TEL_NO = ?, ADD_ = ?\n" +
                        "WHERE E_ID = ?;";

                PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                prepstmt.setString(1,ename);
                prepstmt.setString(2,usrname);
                prepstmt.setString(3,pass);
                prepstmt.setString(4,telno);
                prepstmt.setString(5,addr);
                prepstmt.setString(6,eid);

                prepstmt.execute();

                JOptionPane.showMessageDialog(this, "Employee "+usrname+" was\n" +
                        "updated successfully!");
                }   
            
            //set to default
            lblEmID.setText("no data");
            txtEmName.setText("");
            txtUsrName.setText("");
            pswPsw.setText("");
            txtTelNo.setText("");
            txtAddr.setText("");
            updateEmpTbl();
        }
        catch(HeadlessException e){
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            lblEmID.setText("no data");
            txtEmName.setText("");
            txtUsrName.setText("");
            pswPsw.setText("");
            txtTelNo.setText("");
            txtAddr.setText("");
            updateEmpTbl();
        }
    }

        private boolean validateInputs() {
        String empName = txtEmName.getText();
        String userName = txtUsrName.getText();
        String password = new String(pswPsw.getPassword());
        String telNo = txtTelNo.getText();
        String addr = txtAddr.getText();

        if (empName.isEmpty() || userName.isEmpty() || password.isEmpty() || telNo.isEmpty() || addr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all the required fields.");
            return false; // invalid input values
        }
        
        // validate employee name
        if (empName.length() < 3 || empName.length() > 50) {
            JOptionPane.showMessageDialog(this, "Employee name should be between 3 and 50 characters long!");
            return false; // employee name should be between 3 and 50 characters long
        }
        
        // validate user name
        if (userName.length() < 3 || userName.length() > 10) {
            JOptionPane.showMessageDialog(this, "User name should be between 3 and 10 characters long!");
            return false; // user name should be between 3 and 50 characters long
        }
        
        // Validate password contains both letters and numbers
        if (!password.matches(".*[a-zA-Z].*") || !password.matches(".*\\d.*")) {
            JOptionPane.showMessageDialog(this, "Password should contain both letters and numbers!");
            return false; // password does not contain both letters and numbers
        }

        // Validate the telephone number using the regular expression we defined earlier
        if (!telNo.matches("^0[1-9][0-9]{8}$")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid telephone number!");
            return false; // invalid telephone number
        }
        
        // validate address
        if (addr.length() < 5 || addr.length() > 100) {
            JOptionPane.showMessageDialog(this, "Address should be between 5 and 100 characters long!");
            return false; // address should be between 5 and 100 characters long
        }

        return true; // all input values are valid
    }
    
    private void btnEmSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmSaveActionPerformed
        // TODO add your handling code here:
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String emID = lblEmID.getText();

            // Validate the inputs before proceeding
            if (!validateInputs()) {
                return;
            }

            boolean emExists;
            // execute the query and retrieve the boolean value
            try (
                Statement stmt1 = conn.createStatement();
                ResultSet rs1 = stmt1.executeQuery("SELECT EXISTS(SELECT 1 FROM employee WHERE E_ID = '"+emID+"') AS em_exists;");
            ){
                rs1.next();
                emExists = rs1.getBoolean("em_exists");
            }

            // use the boolean value as needed
            if (emExists) {
                //update employee
                try{
                    updateExistEm();
                    cmbRole.setEnabled(true);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Something is wrong,\nTry again!");
                }
            }
            else {
                //save new employee
                try{
                    saveNewEm();
                    cmbRole.setEnabled(true);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Something is wrong,\nTry again!");
                }
            }   
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "something is wrong\n try again!");
            //set to default
            lblEmID.setText("no data");
            txtEmName.setText("");
            txtUsrName.setText("");
            pswPsw.setText("");
            txtTelNo.setText("");
            txtAddr.setText("");
            updateEmpTbl();
        }
    }//GEN-LAST:event_btnEmSaveActionPerformed

    private void btnEmDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmDeleteActionPerformed
        // TODO add your handling code here:
        try{
            DBConn dbConn = new DBConn();
            Connection conn = dbConn.conn();

            String emID = lblEmID.getText();
            String role = cmbRole.getSelectedItem().toString();

            boolean emExists;
            // execute the query and retrieve the boolean value
            try (
                Statement stmt1 = conn.createStatement();
                // execute the query and retrieve the boolean value

                ResultSet rs1 = stmt1.executeQuery("SELECT EXISTS(SELECT 1 FROM employee WHERE E_ID = '"+emID+"') AS em_exists;")){
                    rs1.next();
                    emExists = rs1.getBoolean("em_exists");
            }

            //if employee is manager
            if (role.equals("Manager")){
                try {

                    Statement stm2 = (Statement) conn.createStatement();

                    String sql = "SELECT COUNT(E_ID) AS COUNT FROM EMPLOYEE\n" +
                                "WHERE ROLE = 'Manager';";

                    ResultSet rs = stm2.executeQuery(sql);

                    while (rs.next()){
                        String mgr_count = String.valueOf(rs.getString("COUNT"));

                        int count=Integer.parseInt(mgr_count);

                        if (count > 1){
                            String uname = txtUsrName.getText();

                            int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete employee " + uname + "?");

                            if (dialogResult == JOptionPane.YES_OPTION) {

                                String query = "DELETE FROM employee WHERE E_ID = ?;";

                                PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                                prepstmt.setString(1,emID);

                                prepstmt.execute();

                                JOptionPane.showMessageDialog(this, "Employee "+uname+" was successfully\ndeleted!");

                                //set to default
                                lblEmID.setText("no data");
                                txtEmName.setText("");
                                txtUsrName.setText("");
                                pswPsw.setText("");
                                txtTelNo.setText("");
                                txtAddr.setText("");
                                updateEmpTbl();
                                cmbRole.setEnabled(true);
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(this,"At least one manager\nshould be remaning!");
                            lblEmID.setText("no data");
                            txtEmName.setText("");
                            txtUsrName.setText("");
                            pswPsw.setText("");
                            txtTelNo.setText("");
                            txtAddr.setText("");
                            updateEmpTbl();
                            cmbRole.setEnabled(true);
                        }
                    }
                }
                catch(HeadlessException | NumberFormatException | SQLException e){
                    JOptionPane.showMessageDialog(this,"Something is wrong,\nTry again!");
                    lblEmID.setText("no data");
                    txtEmName.setText("");
                    txtUsrName.setText("");
                    pswPsw.setText("");
                    txtTelNo.setText("");
                    txtAddr.setText("");
                    updateEmpTbl();
                    cmbRole.setEnabled(true);
                }

            }

            //use boolean value
            else if (emExists) {

                String uname = txtUsrName.getText();

                int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete employee " + uname + "?");

                if (dialogResult == JOptionPane.YES_OPTION) {

                    String query = "DELETE FROM employee WHERE E_ID = ?;";

                    PreparedStatement prepstmt = (PreparedStatement) conn.prepareStatement(query);

                    prepstmt.setString(1,emID);

                    prepstmt.execute();

                    JOptionPane.showMessageDialog(this, "Employee "+uname+" was successfully\ndeleted!");

                    //set to default
                    lblEmID.setText("no data");
                    txtEmName.setText("");
                    txtUsrName.setText("");
                    pswPsw.setText("");
                    txtTelNo.setText("");
                    txtAddr.setText("");
                    updateEmpTbl();
                    cmbRole.setEnabled(true);
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "A valid employee ID has not been selected or\n"
                                + " This employee has not been inserted yet!");
                        lblEmID.setText("no data");
                        txtEmName.setText("");
                        txtUsrName.setText("");
                        pswPsw.setText("");
                        txtTelNo.setText("");
                        txtAddr.setText("");
                        updateEmpTbl();
                        cmbRole.setEnabled(true);
                    }   
                }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "This employee have some billing records,\nSo cannot be deleted!");
            //set to default
            lblEmID.setText("no data");
            txtEmName.setText("");
            txtUsrName.setText("");
            pswPsw.setText("");
            txtTelNo.setText("");
            txtAddr.setText("");
            cmbRole.setEnabled(true);
            updateEmpTbl();       
        }
    }//GEN-LAST:event_btnEmDeleteActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        // TODO add your handling code here:
        Report reprt = new Report();
        reprt.show();
        dispose();
    }//GEN-LAST:event_btnReportActionPerformed

    private void lblLogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoMouseClicked
        // TODO add your handling code here:
        ChooseUser ch = new ChooseUser();
        ch.show();
        dispose();
    }//GEN-LAST:event_lblLogoMouseClicked

    private void txtUsrNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsrNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsrNameActionPerformed

    private void pswPswActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pswPswActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pswPswActionPerformed

    private void txtEmNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmNameActionPerformed

    private void txtTelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelNoActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageEmployees().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmDelete;
    private javax.swing.JButton btnEmSave;
    private javax.swing.JButton btnEmployees;
    private javax.swing.JButton btnItmStock;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSetID;
    private javax.swing.JButton btnSuppliers;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEmID;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JPasswordField pswPsw;
    private javax.swing.JTable tblEmp;
    private javax.swing.JTextField txtAddr;
    private javax.swing.JTextField txtEmName;
    private javax.swing.JTextField txtTelNo;
    private javax.swing.JTextField txtUsrName;
    // End of variables declaration//GEN-END:variables
}
